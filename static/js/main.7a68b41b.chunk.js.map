{"version":3,"sources":["utils/API.js","App.js","serviceWorker.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAMaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACHC,IAAMC,IALnB,iDAK4B,CAChCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,WACPC,MARI,sCAGY,uBACjBC,EADiB,EACjBA,KADiB,kBASjBA,GATiB,2CAAH,sDCuCVC,G,MAxCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPV,EADO,KACAW,EADA,OAEgBD,mBAAS,IAFzB,mBAEPE,EAFO,KAEEC,EAFF,KAIRC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACE,UAAVc,EAAEC,IADM,gCAEYjB,EAAaC,GAFzB,OAEDQ,EAFC,OAIPK,EAAWL,GACXG,EAAS,IALF,2CAAH,sDASZ,OAEI,yBAAKM,UAAU,kBACX,yBAAKA,UAAU,SACX,kDAEJ,2BAAOC,KAAK,OAAMD,UAAU,SAAQE,YAAY,YAAWC,MAAOpB,EAAMqB,SAAU,SAACN,GAAD,OAAOJ,EAASI,EAAEO,OAAOF,QAAOG,WAAYT,IAC7HF,EAAQY,MACL,yBAAKP,UAAU,QACX,wBAAIA,UAAU,aACV,8BAAOL,EAAQa,MACf,6BAAMb,EAAQc,IAAIC,UAEtB,yBAAKV,UAAU,aACVW,KAAKC,MAAMjB,EAAQY,KAAKM,MACzB,uCAEJ,yBAAKb,UAAU,QACX,yBAAKA,UAAU,YAAYc,IAAG,4CAAuCnB,EAAQA,QAAQ,GAAGoB,KAA1D,WAAyEC,IAAKrB,EAAQA,QAAQ,GAAGsB,cAC/H,2BAAItB,EAAQA,QAAQ,GAAGsB,kBCzB3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a68b41b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst URL = 'http://api.openweathermap.org/data/2.5/weather';\r\nconst API_Key = '97f651444e883c7029b564bfc84af4dd';\r\n\r\n\r\nexport const fetchWeather = async (query) => {\r\n    const {data} = await axios.get(URL, {\r\n        params: {\r\n            q: query,\r\n            units: 'imperial',\r\n            APPID: API_Key,\r\n\r\n        }\r\n    });\r\n    return data;\r\n}","import React, { useState } from 'react';\n\nimport { fetchWeather } from './utils/API';\nimport './App.css';\n\nconst App = () => {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    \n    const search = async (e) => {\n        if(e.key === 'Enter') {\n            const data = await fetchWeather(query);\n\n            setWeather(data);\n            setQuery('');\n        }\n    }\n\n    return (\n        \n        <div className=\"main-container\">\n            <div className=\"title\">\n                <h3>React Weather App</h3>\n            </div>\n            <input type=\"text\"className=\"search\"placeholder=\"Search...\"value={query}onChange={(e) => setQuery(e.target.value)}onKeyPress={search}/>\n            {weather.main && (\n                <div className=\"city\">\n                    <h2 className=\"city-name\">\n                        <span>{weather.name}</span>\n                        <sup>{weather.sys.country}</sup>\n                    </h2>\n                    <div className=\"city-temp\">\n                        {Math.round(weather.main.temp)}\n                        <sup>&deg;F</sup>\n                    </div>\n                    <div className=\"info\">\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\n                        <p>{weather.weather[0].description}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}